name: docs

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ develop ]

jobs:
  rtd_build:
    runs-on: ubuntu-latest
    env:
      working-directory: .build_rtd_docs
      distribution-directory: distribution

    steps:
      - uses: actions/checkout@v2.3.4

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Upgrade pip and install packages for Sphinx
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{env.working-directory}}

      - name: Install additional python packages
        run: |
          .github/common/install-python-std.sh

      - name: Setup symbolic links on Linux
        run: |
          sudo ln -fs /usr/bin/gfortran-10 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-10 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-10 /usr/local/bin/g++

      - name: Run-time comparison
        run: |
          python evaluate_run_times.py
        working-directory: ${{env.distribution-directory}}

      - name: run sphinx
        run: |
          make html
        working-directory: ${{env.working-directory}}

      - name: Output run-time file if not triggering rtd build
        if: github.repository_owner == 'MODFLOW-USGS' && github.event_name != 'push'
        run: |
          cat run-time-comparison.md
        working-directory: ${{env.distribution-directory}}

      # Create an artifact of the processed files.
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: rtd-files-for-${{ github.sha }}
          path: |
            ${{env.working-directory}}/index.rst
            ${{env.working-directory}}/mf6io.rst
            ${{env.working-directory}}/_mf6run/
            ${{env.working-directory}}/_mf6io/
            ${{env.working-directory}}/_static/

  # trigger rtd if "rtd_build" job was successful
  rtd_trigger:
    name: rtd-trigger
    needs: rtd_build
    runs-on: ubuntu-latest

    if: github.repository_owner == 'MODFLOW-USGS' && github.event_name == 'push'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Trigger RTDs build on push to repo branches
        uses: dfm/rtds-action@v1.0.3
        with:
          webhook_url: ${{ secrets.MF6_RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.MF6_RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}

  doxygen_build:
    runs-on: ubuntu-latest
    env:
      working-directory: .build_rtd_docs
      distribution-directory: distribution
      common-directory: .github/common
      branch-name: ${GITHUB_REF##*/}

    steps:
      - uses: actions/checkout@v2.3.4

      - name: Print branch name
        run: |
          echo ${{env.branch-name}}

      - name: Install doxygen and graphviz
        run: |
          sudo apt-get update
          sudo apt-get install doxygen graphviz

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: update MODFLOW 6 version
        run: |
          python make_release.py
        working-directory: ${{env.distribution-directory}}

      - name: update MODFLOW 6 version in Doxyfile
        run: |
          import sys
          import os
          sys.path.insert(0, os.path.abspath(os.path.join("..", "doc")))
          from version import __version__
          print("Update the Doxyfile with the latest version number")
          with open("Doxyfile", "r") as fp:
              lines = fp.readlines()

          tag = "PROJECT_NUMBER"
          with open("Doxyfile", "w") as fp:
              for line in lines:
                  if tag in line:
                      line = '{}         = "version {}"\n'.format(tag, __version__)
                  fp.write(line)
        shell: python
        working-directory: ${{env.working-directory}}

      - name: run doxygen
        run: |
          doxygen
        working-directory: ${{env.working-directory}}

      - name: Deploy doxygen html to gh-pages
        uses: peaceiris/actions-gh-pages@v3.7.3
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{env.working-directory}}/html
